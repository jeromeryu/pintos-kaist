Kernel command line: -q -f put exec-arg put child-args run exec-arg
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  39,168,000 loops/s.
hd0:0: detected 337 sector (168 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 204 sector (102 kB) disk, model "QEMU HARDDISK", serial "QM00003"
hd1:1: detected 8,064 sector (3 MB) disk, model "QEMU HARDDISK", serial "QM00004"
Formatting file system...done.
Boot complete.
Putting 'exec-arg' into the file system...
Putting 'child-args' into the file system...
Executing 'exec-arg':
load
load segment
here
vm_alloc_page_with_initializer
here
vm_alloc_page_with_initializer
here
vm_alloc_page_with_initializer
here
vm_alloc_page_with_initializer
here
vm_alloc_page_with_initializer
load
load segment
here
vm_alloc_page_with_initializer
here
vm_alloc_page_with_initializer
vm_alloc_page_with_initializer
anon_init
anon_init
lazy load segment
4096
0
Kernel PANIC at ../../threads/palloc.c:314 in palloc_free_multiple(): executed an unreachable statement
Call stack: 0x8004218683 0x800420be2e 0x800420bf24 0x800421d23e 0x80042227a3 0x8004222619 0x80042224ca 0x800421d9d7 0x8004209468.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 102 ticks
Thread: 30 idle ticks, 59 kernel ticks, 13 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 67 reads, 446 writes
hd1:0: 204 reads, 0 writes
hd1:1: 0 reads, 0 writes
Console: 1669 characters output
Key