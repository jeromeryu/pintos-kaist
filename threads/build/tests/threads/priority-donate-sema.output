Kernel command line: -q run priority-donate-sema
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
timer initCalibrating timer...  77,721,600 loops/s.
Boot complete.
Executing 'priority-donate-sema':
(priority-donate-sema) begin
(priority-donate-sema) Thread L acquired lock.
(priority-donate-sema) Main thread finished.
(priority-donate-sema) end
Execution of 'priority-donate-sema' complete.
Timer: 24 ticks
Thread: 0 idle ticks, 25 kernel ticks, 0 user ticks
Console: 558 characters output
Keyboard: 0 keys pressed
Powering off...
Interrupt 0x0d (#GP General Protection Exception) at rip=8004208bbe
 cr2=000000000020020a error=               c
rax 0000000000000000 rbx 0000000000204400 rcx 00000080040b8000 rdx 00000000000003d4
rsp 0000008004000ef8 rbp 0000008004000f30 rsi 000000000000800f rdi 0000000000000001
rip 0000008004208bbe r8 0000008004000ec8  r9 000000800421650a r10 0000000000000000
r11 0000000000000000 r12 0000000000000000 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00200002
es: 0010 ds: 0010 cs: 0008 ss: 0010
Kernel PANIC at ../../threads/interrupt.c:361 in intr_handler(): Unexpected interrupt
Call stack: 0x8004213222 0x80042087b3 0x8004208b65 0x80042078c7 0x800420da11 0x80042165e8 0x800421645d 0x80042067f3 0x800420613d.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 28 ticks
Thread: 0 idle ticks, 28 kernel ticks, 0 user ticks
Console: 1