Kernel command line: -q -f put syn-write put child-syn-wrt run syn-write
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  261,734,400 loops/s.
hd0:0: detected 321 sector (160 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 226 sector (113 kB) disk, model "QEMU HARDDISK", serial "QM00003"
Formatting file system...done.
Boot complete.
Putting 'syn-write' into the file system...
Putting 'child-syn-wrt' into the file system...
Executing 'syn-write':
(syn-write) begin
(syn-write) create "stuff"
child-syn-wrt: exit(0)
(syn-write) exec child 1 of 10: "child-syn-wrt 0"
(syn-write) exec child 2 of 10: "child-syn-wrt 1"
(syn-write) exec child 3 of 10: "child-syn-wrt 2"
(syn-write) exec child 4 of 10: "child-syn-wrt 3"
(syn-write) exec child 5 of 10: "child-syn-wrt 4"
(syn-write) exec child 6 of 10: "child-syn-wrt 5"
(syn-write) exec child 7 of 10: "child-syn-wrt 6"
(syn-write) exec child 8 of 10: "child-syn-wrt 7"
(syn-write) exec child 9 of 10: "child-syn-wrt 8"
(syn-write) exec child 10 of 10: "child-syn-wrt 9"
(syn-write) wait for child 1 of 10 returned 0 (expected 0)
child-syn-wrt: exit(1)
(syn-write) wait for child 2 of 10 returned 1 (expected 1)
child-syn-wrt: exit(4)
child-syn-wrt: exit(7)
child-syn-wrt: exit(8)
child-syn-wrt: exit(6)
child-syn-wrt: exit(2)
(syn-write) wait for child 3 of 10 returned 2 (expected 2)
child-syn-wrt: exit(9)
child-syn-wrt: exit(3)
(syn-write) wait for child 4 of 10 returned 3 (expected 3)
Interrupt 0x0d (#GP General Protection Exception) at rip=800421c1f3
 cr2=0000000000000000 error=               0
rax cccccccccccccc1c rbx 0000000000000000 rcx 0000000000403816 rdx 0000000000000020
rsp 0000008004241eb0 rbp 0000008004241f00 rsi 0000000000000000 rdi 0000008004241090
rip 000000800421c1f3 r8 0000000000000000  r9 0000000000000000 r10 0000000000000000
r11 0000000000000216 r12 000000800421e18f r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000292
es: 001b ds: 001b cs: 0008 ss: 0010
Kernel PANIC at ../../userprog/exception.c:97 in kill(): Kernel bug - unexpected interrupt in kernel
Call stack: 0x8004218589 0x800421d2f5 0x800420936e 0x800420978c 0x800421e29b 0x800421d4e9 0x4007b7 0x400196 0x400fa5 0x400fee.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 77 ticks
Thread: 36 idle ticks, 34 kernel ticks, 7 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 630 reads, 521 writes
hd1:0: 226 reads, 0 writes
Console: 2712 characters output
Key